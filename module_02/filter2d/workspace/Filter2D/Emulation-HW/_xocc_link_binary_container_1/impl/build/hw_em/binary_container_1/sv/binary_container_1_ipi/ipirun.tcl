# This file automatically generated by SDx 
# please do not modify
source -notrace "/opt/Xilinx/SDx/2017.1.op/bin/../scripts/ocl/ocl_util.tcl"
source -notrace "/opt/Xilinx/SDx/2017.1.op/bin/../data/emulation/hw_em/generic_pcie_v2_0/scripts/hw_em_util.tcl"
source -notrace "/opt/Xilinx/SDx/2017.1.op/bin/../data/emulation/hw_em/common/scripts/hw_em_common_util.tcl"

set project_name "ipiprj"
set design_name "dr"
set dsa_name "4ddr-xpr-2pr"
set dsa_part "xcvu9p-flgb2104-2-i"
set dict_DATA_CLK [dict create \
  is_user_set false \
  freq_orig 250 \
  freq 250];
set dict_KERNEL_CLK2 [dict create \
  is_user_set false \
  freq_orig 500 \
  freq 500];
set dict_clk_main_a0 [dict create \
  is_user_set false \
  freq_orig 250 \
  freq 250];
set kernel_clock_freqs [dict create \
  DATA_CLK $dict_DATA_CLK \
  KERNEL_CLK2 $dict_KERNEL_CLK2 \
];
set system_clock_freqs [dict create \
  clk_main_a0 $dict_clk_main_a0 \
];

set steps_log "/home/centos/SME-Developer-Labs/module_02/filter2d/workspace/Filter2D/Emulation-HW/_xocc_link_binary_container_1/_xocc_link_binary_container_1.steps.log"
set kernel_ip_dirs {
  {/home/centos/SME-Developer-Labs/module_02/filter2d/workspace/Filter2D/Emulation-HW/_xocc_link_binary_container_1/impl/kernels/Filter2DKernel/Filter2DKernel/ip}}
lappend kernel_ip_dirs /opt/Xilinx/SDx/2017.1.op/bin/../data/emulation/hw_em/generic_pcie_v2_0/ip_repo /opt/Xilinx/SDx/2017.1.op/Vivado/bin/../data/emulation/hw_em/ip_repo /opt/Xilinx/SDx/2017.1.op/bin/../data/emulation/hw_em/common/ip_repo

set ocl_ip_info [dict create\
	VLNV   xilinx.com:ip:ocl_block:1.0 \
	CONFIG {  BOUNDARY_VERSION 2  C_BASEADDR {0x44A1E000}  C_HIGHADDR {0x44A1FFFF}  Component_Name {xcl_design_u_ocl_region_0}  EDK_IPTYPE {PERIPHERAL}  ENABLE_ADVANCED_OPTIONS 0  ENABLE_PROFILING 1  ENABLE_SMARTCONNECT 0  HAS_BURST 0  HAS_CONTROL_CLOCK 1  HAS_INTERRUPT 0  HAS_KERNEL_CLOCK 0  HAS_KERNEL_CLOCK2 1  HAS_S_MEM 0  KERNEL_TYPE {ADD_ONE}  KERNEL_VLNV {none}  M00_AXIS_RX_TDATA_NUM_BYTES 8  M00_AXIS_RX_TUSER_WIDTH 8  M01_AXIS_RX_TDATA_NUM_BYTES 8  M01_AXIS_RX_TUSER_WIDTH 8  M_ADDR_WIDTH 36  M_DATA_WIDTH {512}  M_HAS_REGSLICE 4  M_HAS_REGSLICE_MI 0  M_ID_WIDTH 4  NUM_KERNELS 16  NUM_MI 4  NUM_M_AXIS_RX 0  NUM_S_AXIS_TX 0  REGSLICE_CONFIG_DICT {none}  S00_AXIS_TX_TDATA_NUM_BYTES 8  S00_AXIS_TX_TUSER_WIDTH 8  S01_AXIS_TX_TDATA_NUM_BYTES 8  S01_AXIS_TX_TUSER_WIDTH 8  SYNC_RESET 1  S_ADDR_WIDTH 17  S_DATA_WIDTH 32  S_HAS_REGSLICE 4  S_HAS_REGSLICE_SI 0  S_MEM_ADDR_WIDTH 16  S_MEM_DATA_WIDTH 32  S_MEM_ID_WIDTH 1  TIEOFF_KERNEL_RESET 0  USER_WIDTH 0  USE_BSCAN 0  USE_PR 0  USE_SYNTH 0  }\
];

dict set ocl_ip_info CONFIG SYNC_RESET 0; # disable sync_reset for hw_em

# information regarding ips which needs to be added to OCL_REGION only in hw_em flow
set debug_settings [dict create \
  FLOW hw_em\
  KERNEL_DEBUG true\
  PROTOCOL_CHECKER false\
  SIMULATOR Xsim\
];

set dsa_ports { }
lappend dsa_ports [dict create \
  NAME             M00_AXI\
  TYPE             addressable\
  MODE             master\
  PROTOCOL         AXI4\
  ID_WIDTH         4\
  DATA_WIDTH       512\
  ADDR_WIDTH       36\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 256\
  ADDR_OFFSET      0x00000000\
  ADDR_RANGE       0x0000000400000000\
  ADDR_SEGS [list \
    [dict create TYPE MEMORY NAME {mem0} OFFSET {0x000000000000} RANGE {0x400000000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             M01_AXI\
  TYPE             addressable\
  MODE             master\
  PROTOCOL         AXI4\
  ID_WIDTH         4\
  DATA_WIDTH       512\
  ADDR_WIDTH       36\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 256\
  ADDR_OFFSET      0x000400000000\
  ADDR_RANGE       0x0000000400000000\
  ADDR_SEGS [list \
    [dict create TYPE MEMORY NAME {mem1} OFFSET {0x400000000} RANGE {0x400000000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             M02_AXI\
  TYPE             addressable\
  MODE             master\
  PROTOCOL         AXI4\
  ID_WIDTH         4\
  DATA_WIDTH       512\
  ADDR_WIDTH       36\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 256\
  ADDR_OFFSET      0x000800000000\
  ADDR_RANGE       0x0000000400000000\
  ADDR_SEGS [list \
    [dict create TYPE MEMORY NAME {mem2} OFFSET {0x800000000} RANGE {0x400000000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             M03_AXI\
  TYPE             addressable\
  MODE             master\
  PROTOCOL         AXI4\
  ID_WIDTH         4\
  DATA_WIDTH       512\
  ADDR_WIDTH       36\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 256\
  ADDR_OFFSET      0x000C00000000\
  ADDR_RANGE       0x0000000400000000\
  ADDR_SEGS [list \
    [dict create TYPE MEMORY NAME {mem3} OFFSET {0xC00000000} RANGE {0x400000000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             S_AXI\
  TYPE             addressable\
  MODE             slave\
  PROTOCOL         AXI4LITE\
  ID_WIDTH         0\
  DATA_WIDTH       32\
  ADDR_WIDTH       17\
  USER_WIDTH       0\
  MAX_BURST_LENGTH 1\
  ADDR_OFFSET      0x00000000\
  ADDR_RANGE       0x00020000\
  ADDR_SEGS [list \
    [dict create TYPE REGISTER NAME {} OFFSET {0x00000000} RANGE {0x00020000}] \
  ] \
  ];

lappend dsa_ports [dict create \
  NAME             DATA_CLK\
  TYPE             clk\
  MODE             input\
  CONFIG           {CONFIG.FREQ_HZ 250000000}\
  ];

lappend dsa_ports [dict create \
  NAME             DATA_RESET\
  TYPE             rst\
  MODE             input\
  CONFIG           {}\
  ];

lappend dsa_ports [dict create \
  NAME             CONTROL_CLK\
  TYPE             clk\
  MODE             input\
  CONFIG           {CONFIG.FREQ_HZ 125000000}\
  ];

lappend dsa_ports [dict create \
  NAME             CONTROL_RESET\
  TYPE             rst\
  MODE             input\
  CONFIG           {}\
  ];

lappend dsa_ports [dict create \
  NAME             KERNEL_CLK2\
  TYPE             clk\
  MODE             input\
  CONFIG           {CONFIG.FREQ_HZ 500000000}\
  ];

lappend dsa_ports [dict create \
  NAME             KERNEL_RESET2\
  TYPE             rst\
  MODE             input\
  CONFIG           {}\
  ];

### Board info
set board_memories {}
lappend board_memories [dict create  \
  NAME        mem0 \
  TYPE        ddr4 \
  SIZE        16GB \
  CONFIG      {} \
  ];
lappend board_memories [dict create  \
  NAME        mem1 \
  TYPE        ddr4 \
  SIZE        16GB \
  CONFIG      {} \
  ];
lappend board_memories [dict create  \
  NAME        mem2 \
  TYPE        ddr4 \
  SIZE        16GB \
  CONFIG      {} \
  ];
lappend board_memories [dict create  \
  NAME        mem3 \
  TYPE        ddr4 \
  SIZE        16GB \
  CONFIG      {} \
  ];

set kernels {}
set kernel_resources {}
if { [file exists ./map.tcl] } {
  puts "Sourcing kernel info from: ./map.tcl"
  source ./map.tcl
}

#### Clean Existing project files (allows for iterative sourcing of this script)
catch {close_project} 
file delete -force $project_name 

### Create OCL region
send_msg_id {101-1} {status} {Creating Vivado project and starting FPGA synthesis.}
create_project -part $dsa_part -force $project_name $project_name 
ocl_util::add_to_steps_log $steps_log "internal step: creating ipiprj project for generating ocl dcp"
ocl_util::init_ocl_project $design_name $kernel_ip_dirs 
ocl_util::add_to_steps_log $steps_log "internal step: creating ocl region bd"
set ocl_content_dict [ocl_util::create_ocl_region_bd $dsa_name $dsa_ports $kernels $ocl_ip_info $kernel_resources $debug_settings]

# Copy the OOC constraint files in BD, and add them to the top level design in order for
# the clock constraints to be applied
set_param project.loadTopLevelOOCConstrs 1
set ooc_xdc_files [get_files -of_object [get_files $design_name.bd] -norecurse -filter { FILE_TYPE == "XDC" && USED_IN =~ "*out_of_context*" }]
foreach ooc_xdc_file $ooc_xdc_files {
  if {![string equal $ooc_xdc_file ""] && [file exists $ooc_xdc_file]} {
    set used_in_value [get_property used_in $ooc_xdc_file]
    set xdc_file "[file rootname [file tail $ooc_xdc_file]]_copy.xdc"
    file copy $ooc_xdc_file ./$xdc_file
    set xdc_file_obj [add_files ./$xdc_file -fileset [current_fileset -constrset]]
    set_property used_in $used_in_value $xdc_file_obj
    set_property processing_order "early" [get_files $xdc_file]
  }
}

set metadataJson /opt/Xilinx/SDx/2017.1.op/bin/../data/emulation/hw_em/generic_pcie_v2_0/scripts/metadata.json
set dsa_vbnv xilinx:aws-vu9p-f1:4ddr-xpr-2pr:4.0
### Update OCL region for emulation
group_bd_cells OCL_Region_0 [get_bd_cells *]
hw_em_util::add_base_platform $ocl_content_dict $dsa_ports $dsa_vbnv $board_memories $ocl_ip_info $kernel_clock_freqs $metadataJson

### Create and run emulation scripts
set hw_em_debug_level OFF
set simulator Xsim
set clibs ""
hw_em_util::generate_simulation_scripts_and_compile $hw_em_debug_level $simulator $clibs true
set kernels "Filter2DKernel c"
ocl_util::generate_kernel_inst_path_data $kernels
close_project 

