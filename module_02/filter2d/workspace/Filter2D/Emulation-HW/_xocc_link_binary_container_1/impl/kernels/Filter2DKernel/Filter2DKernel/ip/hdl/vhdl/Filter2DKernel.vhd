-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2DKernel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of Filter2DKernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Filter2DKernel,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.920000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=78,HLS_SYN_DSP=904,HLS_SYN_FF=60137,HLS_SYN_LUT=38112}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv256_lc_2 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC := '1';
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal coeffs : STD_LOGIC_VECTOR (63 downto 0);
    signal src_V : STD_LOGIC_VECTOR (63 downto 0);
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal stride : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream8_U0_ap_start : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_ap_done : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_ap_continue : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_ap_idle : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_ap_ready : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWVALID : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_WVALID : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_WLAST : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARVALID : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_RREADY : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_m_axi_axi_V_BREADY : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIBursts2PixelStream8_U0_stream_V_write : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_width_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream8_U0_width_out_write : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_height_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream8_U0_height_out_write : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_stride_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream8_U0_stride_out_write : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_coeffs_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal AXIBursts2PixelStream8_U0_coeffs_out_write : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_dst_V_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal AXIBursts2PixelStream8_U0_dst_V_out_write : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_ap_ext_blocking_n : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_ap_str_blocking_n : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_ap_int_blocking_n : STD_LOGIC;
    signal Filter2D_U0_ap_start : STD_LOGIC;
    signal Filter2D_U0_ap_done : STD_LOGIC;
    signal Filter2D_U0_ap_continue : STD_LOGIC;
    signal Filter2D_U0_ap_idle : STD_LOGIC;
    signal Filter2D_U0_ap_ready : STD_LOGIC;
    signal Filter2D_U0_m_axi_srcCoeffs_AWVALID : STD_LOGIC;
    signal Filter2D_U0_m_axi_srcCoeffs_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_WVALID : STD_LOGIC;
    signal Filter2D_U0_m_axi_srcCoeffs_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_WLAST : STD_LOGIC;
    signal Filter2D_U0_m_axi_srcCoeffs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARVALID : STD_LOGIC;
    signal Filter2D_U0_m_axi_srcCoeffs_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_srcCoeffs_RREADY : STD_LOGIC;
    signal Filter2D_U0_m_axi_srcCoeffs_BREADY : STD_LOGIC;
    signal Filter2D_U0_srcCoeffs_offset_read : STD_LOGIC;
    signal Filter2D_U0_srcImg_V_read : STD_LOGIC;
    signal Filter2D_U0_width_read : STD_LOGIC;
    signal Filter2D_U0_height_read : STD_LOGIC;
    signal Filter2D_U0_dstImg_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Filter2D_U0_dstImg_V_write : STD_LOGIC;
    signal Filter2D_U0_width_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_width_out_write : STD_LOGIC;
    signal Filter2D_U0_height_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_height_out_write : STD_LOGIC;
    signal Filter2D_U0_ap_ext_blocking_n : STD_LOGIC;
    signal Filter2D_U0_ap_str_blocking_n : STD_LOGIC;
    signal Filter2D_U0_ap_int_blocking_n : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_start : STD_LOGIC := '0';
    signal PixelStream2AXIBursts_U0_ap_done : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_continue : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_idle : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_ready : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_stream_V_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_width_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_height_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_stride_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWVALID : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_WVALID : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_WLAST : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARVALID : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_RREADY : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_aximm_V_BREADY : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_aximm_V_offset_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_ext_blocking_n : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_str_blocking_n : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal src_pixels_V_full_n : STD_LOGIC;
    signal src_pixels_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_pixels_V_empty_n : STD_LOGIC;
    signal width_c_full_n : STD_LOGIC;
    signal width_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal width_c_empty_n : STD_LOGIC;
    signal height_c_full_n : STD_LOGIC;
    signal height_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal height_c_empty_n : STD_LOGIC;
    signal stride_c_full_n : STD_LOGIC;
    signal stride_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_c_empty_n : STD_LOGIC;
    signal coeffs_c_full_n : STD_LOGIC;
    signal coeffs_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal coeffs_c_empty_n : STD_LOGIC;
    signal dst_V_c_full_n : STD_LOGIC;
    signal dst_V_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_V_c_empty_n : STD_LOGIC;
    signal dst_pixels_V_full_n : STD_LOGIC;
    signal dst_pixels_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_pixels_V_empty_n : STD_LOGIC;
    signal width_c1_full_n : STD_LOGIC;
    signal width_c1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal width_c1_empty_n : STD_LOGIC;
    signal height_c2_full_n : STD_LOGIC;
    signal height_c2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal height_c2_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Filter2D_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Filter2D_U0_ap_ready : STD_LOGIC;
    signal Filter2D_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIBursts2PixelStream8_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIBursts2PixelStream8_U0_ap_ready : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXIBursts2PixelStream8_U0_start_full_n : STD_LOGIC;
    signal AXIBursts2PixelStream8_U0_start_write : STD_LOGIC;
    signal Filter2D_U0_start_full_n : STD_LOGIC;
    signal Filter2D_U0_start_write : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_start_full_n : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_start_write : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;

    component AXIBursts2PixelStream8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_axi_V_AWVALID : OUT STD_LOGIC;
        m_axi_axi_V_AWREADY : IN STD_LOGIC;
        m_axi_axi_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_axi_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_axi_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_axi_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_axi_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_axi_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_axi_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_axi_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_axi_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_axi_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_axi_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_axi_V_WVALID : OUT STD_LOGIC;
        m_axi_axi_V_WREADY : IN STD_LOGIC;
        m_axi_axi_V_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_axi_V_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_axi_V_WLAST : OUT STD_LOGIC;
        m_axi_axi_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_axi_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_axi_V_ARVALID : OUT STD_LOGIC;
        m_axi_axi_V_ARREADY : IN STD_LOGIC;
        m_axi_axi_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_axi_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_axi_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_axi_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_axi_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_axi_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_axi_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_axi_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_axi_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_axi_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_axi_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_axi_V_RVALID : IN STD_LOGIC;
        m_axi_axi_V_RREADY : OUT STD_LOGIC;
        m_axi_axi_V_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_axi_V_RLAST : IN STD_LOGIC;
        m_axi_axi_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_axi_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_axi_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_axi_V_BVALID : IN STD_LOGIC;
        m_axi_axi_V_BREADY : OUT STD_LOGIC;
        m_axi_axi_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_axi_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_axi_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        axi_V_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        height : IN STD_LOGIC_VECTOR (31 downto 0);
        stride : IN STD_LOGIC_VECTOR (31 downto 0);
        stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        stream_V_full_n : IN STD_LOGIC;
        stream_V_write : OUT STD_LOGIC;
        width_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_out_full_n : IN STD_LOGIC;
        width_out_write : OUT STD_LOGIC;
        height_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        height_out_full_n : IN STD_LOGIC;
        height_out_write : OUT STD_LOGIC;
        stride_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        stride_out_full_n : IN STD_LOGIC;
        stride_out_write : OUT STD_LOGIC;
        coeffs : IN STD_LOGIC_VECTOR (63 downto 0);
        dst_V : IN STD_LOGIC_VECTOR (63 downto 0);
        coeffs_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        coeffs_out_full_n : IN STD_LOGIC;
        coeffs_out_write : OUT STD_LOGIC;
        dst_V_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        dst_V_out_full_n : IN STD_LOGIC;
        dst_V_out_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Filter2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_srcCoeffs_AWVALID : OUT STD_LOGIC;
        m_axi_srcCoeffs_AWREADY : IN STD_LOGIC;
        m_axi_srcCoeffs_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_srcCoeffs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_srcCoeffs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_srcCoeffs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_srcCoeffs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_srcCoeffs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_srcCoeffs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_srcCoeffs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_srcCoeffs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_srcCoeffs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_srcCoeffs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_srcCoeffs_WVALID : OUT STD_LOGIC;
        m_axi_srcCoeffs_WREADY : IN STD_LOGIC;
        m_axi_srcCoeffs_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_srcCoeffs_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_srcCoeffs_WLAST : OUT STD_LOGIC;
        m_axi_srcCoeffs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_srcCoeffs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_srcCoeffs_ARVALID : OUT STD_LOGIC;
        m_axi_srcCoeffs_ARREADY : IN STD_LOGIC;
        m_axi_srcCoeffs_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_srcCoeffs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_srcCoeffs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_srcCoeffs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_srcCoeffs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_srcCoeffs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_srcCoeffs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_srcCoeffs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_srcCoeffs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_srcCoeffs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_srcCoeffs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_srcCoeffs_RVALID : IN STD_LOGIC;
        m_axi_srcCoeffs_RREADY : OUT STD_LOGIC;
        m_axi_srcCoeffs_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_srcCoeffs_RLAST : IN STD_LOGIC;
        m_axi_srcCoeffs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_srcCoeffs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_srcCoeffs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_srcCoeffs_BVALID : IN STD_LOGIC;
        m_axi_srcCoeffs_BREADY : OUT STD_LOGIC;
        m_axi_srcCoeffs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_srcCoeffs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_srcCoeffs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        srcCoeffs_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        srcCoeffs_offset_empty_n : IN STD_LOGIC;
        srcCoeffs_offset_read : OUT STD_LOGIC;
        srcImg_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        srcImg_V_empty_n : IN STD_LOGIC;
        srcImg_V_read : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        height_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC;
        dstImg_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dstImg_V_full_n : IN STD_LOGIC;
        dstImg_V_write : OUT STD_LOGIC;
        width_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_out_full_n : IN STD_LOGIC;
        width_out_write : OUT STD_LOGIC;
        height_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        height_out_full_n : IN STD_LOGIC;
        height_out_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component PixelStream2AXIBursts IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        stream_V_empty_n : IN STD_LOGIC;
        stream_V_read : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        height_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC;
        stride_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        stride_empty_n : IN STD_LOGIC;
        stride_read : OUT STD_LOGIC;
        m_axi_aximm_V_AWVALID : OUT STD_LOGIC;
        m_axi_aximm_V_AWREADY : IN STD_LOGIC;
        m_axi_aximm_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm_V_WVALID : OUT STD_LOGIC;
        m_axi_aximm_V_WREADY : IN STD_LOGIC;
        m_axi_aximm_V_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_aximm_V_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm_V_WLAST : OUT STD_LOGIC;
        m_axi_aximm_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm_V_ARVALID : OUT STD_LOGIC;
        m_axi_aximm_V_ARREADY : IN STD_LOGIC;
        m_axi_aximm_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm_V_RVALID : IN STD_LOGIC;
        m_axi_aximm_V_RREADY : OUT STD_LOGIC;
        m_axi_aximm_V_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_aximm_V_RLAST : IN STD_LOGIC;
        m_axi_aximm_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm_V_BVALID : IN STD_LOGIC;
        m_axi_aximm_V_BREADY : OUT STD_LOGIC;
        m_axi_aximm_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        aximm_V_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        aximm_V_offset_empty_n : IN STD_LOGIC;
        aximm_V_offset_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component fifo_w8_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        coeffs : OUT STD_LOGIC_VECTOR (63 downto 0);
        src_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        width : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        stride : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_V : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Filter2DKernel_gmem1_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Filter2DKernel_gmem0_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Filter2DKernel_control_s_axi_U : component Filter2DKernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        coeffs => coeffs,
        src_V => src_V,
        width => width,
        height => height,
        stride => stride,
        dst_V => dst_V);

    Filter2DKernel_gmem1_m_axi_U : component Filter2DKernel_gmem1_m_axi
    generic map (
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Filter2D_U0_m_axi_srcCoeffs_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => Filter2D_U0_m_axi_srcCoeffs_ARADDR,
        I_ARID => Filter2D_U0_m_axi_srcCoeffs_ARID,
        I_ARLEN => Filter2D_U0_m_axi_srcCoeffs_ARLEN,
        I_ARSIZE => Filter2D_U0_m_axi_srcCoeffs_ARSIZE,
        I_ARLOCK => Filter2D_U0_m_axi_srcCoeffs_ARLOCK,
        I_ARCACHE => Filter2D_U0_m_axi_srcCoeffs_ARCACHE,
        I_ARQOS => Filter2D_U0_m_axi_srcCoeffs_ARQOS,
        I_ARPROT => Filter2D_U0_m_axi_srcCoeffs_ARPROT,
        I_ARUSER => Filter2D_U0_m_axi_srcCoeffs_ARUSER,
        I_ARBURST => Filter2D_U0_m_axi_srcCoeffs_ARBURST,
        I_ARREGION => Filter2D_U0_m_axi_srcCoeffs_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => Filter2D_U0_m_axi_srcCoeffs_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWADDR,
        I_AWID => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWID,
        I_AWLEN => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWLEN,
        I_AWSIZE => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWSIZE,
        I_AWLOCK => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWLOCK,
        I_AWCACHE => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWCACHE,
        I_AWQOS => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWQOS,
        I_AWPROT => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWPROT,
        I_AWUSER => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWUSER,
        I_AWBURST => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWBURST,
        I_AWREGION => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWREGION,
        I_WVALID => PixelStream2AXIBursts_U0_m_axi_aximm_V_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => PixelStream2AXIBursts_U0_m_axi_aximm_V_WDATA,
        I_WID => PixelStream2AXIBursts_U0_m_axi_aximm_V_WID,
        I_WUSER => PixelStream2AXIBursts_U0_m_axi_aximm_V_WUSER,
        I_WLAST => PixelStream2AXIBursts_U0_m_axi_aximm_V_WLAST,
        I_WSTRB => PixelStream2AXIBursts_U0_m_axi_aximm_V_WSTRB,
        I_BVALID => gmem1_BVALID,
        I_BREADY => PixelStream2AXIBursts_U0_m_axi_aximm_V_BREADY,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    Filter2DKernel_gmem0_m_axi_U : component Filter2DKernel_gmem0_m_axi
    generic map (
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARADDR,
        I_ARID => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARID,
        I_ARLEN => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARLEN,
        I_ARSIZE => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARSIZE,
        I_ARLOCK => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARLOCK,
        I_ARCACHE => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARCACHE,
        I_ARQOS => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARQOS,
        I_ARPROT => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARPROT,
        I_ARUSER => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARUSER,
        I_ARBURST => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARBURST,
        I_ARREGION => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => AXIBursts2PixelStream8_U0_m_axi_axi_V_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv256_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv32_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    AXIBursts2PixelStream8_U0 : component AXIBursts2PixelStream8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIBursts2PixelStream8_U0_ap_start,
        ap_done => AXIBursts2PixelStream8_U0_ap_done,
        ap_continue => AXIBursts2PixelStream8_U0_ap_continue,
        ap_idle => AXIBursts2PixelStream8_U0_ap_idle,
        ap_ready => AXIBursts2PixelStream8_U0_ap_ready,
        m_axi_axi_V_AWVALID => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWVALID,
        m_axi_axi_V_AWREADY => ap_const_logic_0,
        m_axi_axi_V_AWADDR => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWADDR,
        m_axi_axi_V_AWID => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWID,
        m_axi_axi_V_AWLEN => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWLEN,
        m_axi_axi_V_AWSIZE => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWSIZE,
        m_axi_axi_V_AWBURST => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWBURST,
        m_axi_axi_V_AWLOCK => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWLOCK,
        m_axi_axi_V_AWCACHE => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWCACHE,
        m_axi_axi_V_AWPROT => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWPROT,
        m_axi_axi_V_AWQOS => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWQOS,
        m_axi_axi_V_AWREGION => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWREGION,
        m_axi_axi_V_AWUSER => AXIBursts2PixelStream8_U0_m_axi_axi_V_AWUSER,
        m_axi_axi_V_WVALID => AXIBursts2PixelStream8_U0_m_axi_axi_V_WVALID,
        m_axi_axi_V_WREADY => ap_const_logic_0,
        m_axi_axi_V_WDATA => AXIBursts2PixelStream8_U0_m_axi_axi_V_WDATA,
        m_axi_axi_V_WSTRB => AXIBursts2PixelStream8_U0_m_axi_axi_V_WSTRB,
        m_axi_axi_V_WLAST => AXIBursts2PixelStream8_U0_m_axi_axi_V_WLAST,
        m_axi_axi_V_WID => AXIBursts2PixelStream8_U0_m_axi_axi_V_WID,
        m_axi_axi_V_WUSER => AXIBursts2PixelStream8_U0_m_axi_axi_V_WUSER,
        m_axi_axi_V_ARVALID => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARVALID,
        m_axi_axi_V_ARREADY => gmem0_ARREADY,
        m_axi_axi_V_ARADDR => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARADDR,
        m_axi_axi_V_ARID => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARID,
        m_axi_axi_V_ARLEN => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARLEN,
        m_axi_axi_V_ARSIZE => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARSIZE,
        m_axi_axi_V_ARBURST => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARBURST,
        m_axi_axi_V_ARLOCK => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARLOCK,
        m_axi_axi_V_ARCACHE => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARCACHE,
        m_axi_axi_V_ARPROT => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARPROT,
        m_axi_axi_V_ARQOS => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARQOS,
        m_axi_axi_V_ARREGION => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARREGION,
        m_axi_axi_V_ARUSER => AXIBursts2PixelStream8_U0_m_axi_axi_V_ARUSER,
        m_axi_axi_V_RVALID => gmem0_RVALID,
        m_axi_axi_V_RREADY => AXIBursts2PixelStream8_U0_m_axi_axi_V_RREADY,
        m_axi_axi_V_RDATA => gmem0_RDATA,
        m_axi_axi_V_RLAST => gmem0_RLAST,
        m_axi_axi_V_RID => gmem0_RID,
        m_axi_axi_V_RUSER => gmem0_RUSER,
        m_axi_axi_V_RRESP => gmem0_RRESP,
        m_axi_axi_V_BVALID => ap_const_logic_0,
        m_axi_axi_V_BREADY => AXIBursts2PixelStream8_U0_m_axi_axi_V_BREADY,
        m_axi_axi_V_BRESP => ap_const_lv2_0,
        m_axi_axi_V_BID => ap_const_lv1_0,
        m_axi_axi_V_BUSER => ap_const_lv1_0,
        axi_V_offset => src_V,
        width => width,
        height => height,
        stride => stride,
        stream_V_din => AXIBursts2PixelStream8_U0_stream_V_din,
        stream_V_full_n => src_pixels_V_full_n,
        stream_V_write => AXIBursts2PixelStream8_U0_stream_V_write,
        width_out_din => AXIBursts2PixelStream8_U0_width_out_din,
        width_out_full_n => width_c_full_n,
        width_out_write => AXIBursts2PixelStream8_U0_width_out_write,
        height_out_din => AXIBursts2PixelStream8_U0_height_out_din,
        height_out_full_n => height_c_full_n,
        height_out_write => AXIBursts2PixelStream8_U0_height_out_write,
        stride_out_din => AXIBursts2PixelStream8_U0_stride_out_din,
        stride_out_full_n => stride_c_full_n,
        stride_out_write => AXIBursts2PixelStream8_U0_stride_out_write,
        coeffs => coeffs,
        dst_V => dst_V,
        coeffs_out_din => AXIBursts2PixelStream8_U0_coeffs_out_din,
        coeffs_out_full_n => coeffs_c_full_n,
        coeffs_out_write => AXIBursts2PixelStream8_U0_coeffs_out_write,
        dst_V_out_din => AXIBursts2PixelStream8_U0_dst_V_out_din,
        dst_V_out_full_n => dst_V_c_full_n,
        dst_V_out_write => AXIBursts2PixelStream8_U0_dst_V_out_write,
        ap_ext_blocking_n => AXIBursts2PixelStream8_U0_ap_ext_blocking_n,
        ap_str_blocking_n => AXIBursts2PixelStream8_U0_ap_str_blocking_n,
        ap_int_blocking_n => AXIBursts2PixelStream8_U0_ap_int_blocking_n);

    Filter2D_U0 : component Filter2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Filter2D_U0_ap_start,
        ap_done => Filter2D_U0_ap_done,
        ap_continue => Filter2D_U0_ap_continue,
        ap_idle => Filter2D_U0_ap_idle,
        ap_ready => Filter2D_U0_ap_ready,
        m_axi_srcCoeffs_AWVALID => Filter2D_U0_m_axi_srcCoeffs_AWVALID,
        m_axi_srcCoeffs_AWREADY => ap_const_logic_0,
        m_axi_srcCoeffs_AWADDR => Filter2D_U0_m_axi_srcCoeffs_AWADDR,
        m_axi_srcCoeffs_AWID => Filter2D_U0_m_axi_srcCoeffs_AWID,
        m_axi_srcCoeffs_AWLEN => Filter2D_U0_m_axi_srcCoeffs_AWLEN,
        m_axi_srcCoeffs_AWSIZE => Filter2D_U0_m_axi_srcCoeffs_AWSIZE,
        m_axi_srcCoeffs_AWBURST => Filter2D_U0_m_axi_srcCoeffs_AWBURST,
        m_axi_srcCoeffs_AWLOCK => Filter2D_U0_m_axi_srcCoeffs_AWLOCK,
        m_axi_srcCoeffs_AWCACHE => Filter2D_U0_m_axi_srcCoeffs_AWCACHE,
        m_axi_srcCoeffs_AWPROT => Filter2D_U0_m_axi_srcCoeffs_AWPROT,
        m_axi_srcCoeffs_AWQOS => Filter2D_U0_m_axi_srcCoeffs_AWQOS,
        m_axi_srcCoeffs_AWREGION => Filter2D_U0_m_axi_srcCoeffs_AWREGION,
        m_axi_srcCoeffs_AWUSER => Filter2D_U0_m_axi_srcCoeffs_AWUSER,
        m_axi_srcCoeffs_WVALID => Filter2D_U0_m_axi_srcCoeffs_WVALID,
        m_axi_srcCoeffs_WREADY => ap_const_logic_0,
        m_axi_srcCoeffs_WDATA => Filter2D_U0_m_axi_srcCoeffs_WDATA,
        m_axi_srcCoeffs_WSTRB => Filter2D_U0_m_axi_srcCoeffs_WSTRB,
        m_axi_srcCoeffs_WLAST => Filter2D_U0_m_axi_srcCoeffs_WLAST,
        m_axi_srcCoeffs_WID => Filter2D_U0_m_axi_srcCoeffs_WID,
        m_axi_srcCoeffs_WUSER => Filter2D_U0_m_axi_srcCoeffs_WUSER,
        m_axi_srcCoeffs_ARVALID => Filter2D_U0_m_axi_srcCoeffs_ARVALID,
        m_axi_srcCoeffs_ARREADY => gmem1_ARREADY,
        m_axi_srcCoeffs_ARADDR => Filter2D_U0_m_axi_srcCoeffs_ARADDR,
        m_axi_srcCoeffs_ARID => Filter2D_U0_m_axi_srcCoeffs_ARID,
        m_axi_srcCoeffs_ARLEN => Filter2D_U0_m_axi_srcCoeffs_ARLEN,
        m_axi_srcCoeffs_ARSIZE => Filter2D_U0_m_axi_srcCoeffs_ARSIZE,
        m_axi_srcCoeffs_ARBURST => Filter2D_U0_m_axi_srcCoeffs_ARBURST,
        m_axi_srcCoeffs_ARLOCK => Filter2D_U0_m_axi_srcCoeffs_ARLOCK,
        m_axi_srcCoeffs_ARCACHE => Filter2D_U0_m_axi_srcCoeffs_ARCACHE,
        m_axi_srcCoeffs_ARPROT => Filter2D_U0_m_axi_srcCoeffs_ARPROT,
        m_axi_srcCoeffs_ARQOS => Filter2D_U0_m_axi_srcCoeffs_ARQOS,
        m_axi_srcCoeffs_ARREGION => Filter2D_U0_m_axi_srcCoeffs_ARREGION,
        m_axi_srcCoeffs_ARUSER => Filter2D_U0_m_axi_srcCoeffs_ARUSER,
        m_axi_srcCoeffs_RVALID => gmem1_RVALID,
        m_axi_srcCoeffs_RREADY => Filter2D_U0_m_axi_srcCoeffs_RREADY,
        m_axi_srcCoeffs_RDATA => gmem1_RDATA,
        m_axi_srcCoeffs_RLAST => gmem1_RLAST,
        m_axi_srcCoeffs_RID => gmem1_RID,
        m_axi_srcCoeffs_RUSER => gmem1_RUSER,
        m_axi_srcCoeffs_RRESP => gmem1_RRESP,
        m_axi_srcCoeffs_BVALID => ap_const_logic_0,
        m_axi_srcCoeffs_BREADY => Filter2D_U0_m_axi_srcCoeffs_BREADY,
        m_axi_srcCoeffs_BRESP => ap_const_lv2_0,
        m_axi_srcCoeffs_BID => ap_const_lv1_0,
        m_axi_srcCoeffs_BUSER => ap_const_lv1_0,
        srcCoeffs_offset_dout => coeffs_c_dout,
        srcCoeffs_offset_empty_n => coeffs_c_empty_n,
        srcCoeffs_offset_read => Filter2D_U0_srcCoeffs_offset_read,
        srcImg_V_dout => src_pixels_V_dout,
        srcImg_V_empty_n => src_pixels_V_empty_n,
        srcImg_V_read => Filter2D_U0_srcImg_V_read,
        width_dout => width_c_dout,
        width_empty_n => width_c_empty_n,
        width_read => Filter2D_U0_width_read,
        height_dout => height_c_dout,
        height_empty_n => height_c_empty_n,
        height_read => Filter2D_U0_height_read,
        dstImg_V_din => Filter2D_U0_dstImg_V_din,
        dstImg_V_full_n => dst_pixels_V_full_n,
        dstImg_V_write => Filter2D_U0_dstImg_V_write,
        width_out_din => Filter2D_U0_width_out_din,
        width_out_full_n => width_c1_full_n,
        width_out_write => Filter2D_U0_width_out_write,
        height_out_din => Filter2D_U0_height_out_din,
        height_out_full_n => height_c2_full_n,
        height_out_write => Filter2D_U0_height_out_write,
        ap_ext_blocking_n => Filter2D_U0_ap_ext_blocking_n,
        ap_str_blocking_n => Filter2D_U0_ap_str_blocking_n,
        ap_int_blocking_n => Filter2D_U0_ap_int_blocking_n);

    PixelStream2AXIBursts_U0 : component PixelStream2AXIBursts
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => PixelStream2AXIBursts_U0_ap_start,
        ap_done => PixelStream2AXIBursts_U0_ap_done,
        ap_continue => PixelStream2AXIBursts_U0_ap_continue,
        ap_idle => PixelStream2AXIBursts_U0_ap_idle,
        ap_ready => PixelStream2AXIBursts_U0_ap_ready,
        stream_V_dout => dst_pixels_V_dout,
        stream_V_empty_n => dst_pixels_V_empty_n,
        stream_V_read => PixelStream2AXIBursts_U0_stream_V_read,
        width_dout => width_c1_dout,
        width_empty_n => width_c1_empty_n,
        width_read => PixelStream2AXIBursts_U0_width_read,
        height_dout => height_c2_dout,
        height_empty_n => height_c2_empty_n,
        height_read => PixelStream2AXIBursts_U0_height_read,
        stride_dout => stride_c_dout,
        stride_empty_n => stride_c_empty_n,
        stride_read => PixelStream2AXIBursts_U0_stride_read,
        m_axi_aximm_V_AWVALID => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWVALID,
        m_axi_aximm_V_AWREADY => gmem1_AWREADY,
        m_axi_aximm_V_AWADDR => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWADDR,
        m_axi_aximm_V_AWID => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWID,
        m_axi_aximm_V_AWLEN => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWLEN,
        m_axi_aximm_V_AWSIZE => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWSIZE,
        m_axi_aximm_V_AWBURST => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWBURST,
        m_axi_aximm_V_AWLOCK => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWLOCK,
        m_axi_aximm_V_AWCACHE => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWCACHE,
        m_axi_aximm_V_AWPROT => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWPROT,
        m_axi_aximm_V_AWQOS => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWQOS,
        m_axi_aximm_V_AWREGION => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWREGION,
        m_axi_aximm_V_AWUSER => PixelStream2AXIBursts_U0_m_axi_aximm_V_AWUSER,
        m_axi_aximm_V_WVALID => PixelStream2AXIBursts_U0_m_axi_aximm_V_WVALID,
        m_axi_aximm_V_WREADY => gmem1_WREADY,
        m_axi_aximm_V_WDATA => PixelStream2AXIBursts_U0_m_axi_aximm_V_WDATA,
        m_axi_aximm_V_WSTRB => PixelStream2AXIBursts_U0_m_axi_aximm_V_WSTRB,
        m_axi_aximm_V_WLAST => PixelStream2AXIBursts_U0_m_axi_aximm_V_WLAST,
        m_axi_aximm_V_WID => PixelStream2AXIBursts_U0_m_axi_aximm_V_WID,
        m_axi_aximm_V_WUSER => PixelStream2AXIBursts_U0_m_axi_aximm_V_WUSER,
        m_axi_aximm_V_ARVALID => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARVALID,
        m_axi_aximm_V_ARREADY => ap_const_logic_0,
        m_axi_aximm_V_ARADDR => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARADDR,
        m_axi_aximm_V_ARID => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARID,
        m_axi_aximm_V_ARLEN => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARLEN,
        m_axi_aximm_V_ARSIZE => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARSIZE,
        m_axi_aximm_V_ARBURST => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARBURST,
        m_axi_aximm_V_ARLOCK => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARLOCK,
        m_axi_aximm_V_ARCACHE => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARCACHE,
        m_axi_aximm_V_ARPROT => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARPROT,
        m_axi_aximm_V_ARQOS => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARQOS,
        m_axi_aximm_V_ARREGION => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARREGION,
        m_axi_aximm_V_ARUSER => PixelStream2AXIBursts_U0_m_axi_aximm_V_ARUSER,
        m_axi_aximm_V_RVALID => ap_const_logic_0,
        m_axi_aximm_V_RREADY => PixelStream2AXIBursts_U0_m_axi_aximm_V_RREADY,
        m_axi_aximm_V_RDATA => ap_const_lv256_lc_1,
        m_axi_aximm_V_RLAST => ap_const_logic_0,
        m_axi_aximm_V_RID => ap_const_lv1_0,
        m_axi_aximm_V_RUSER => ap_const_lv1_0,
        m_axi_aximm_V_RRESP => ap_const_lv2_0,
        m_axi_aximm_V_BVALID => gmem1_BVALID,
        m_axi_aximm_V_BREADY => PixelStream2AXIBursts_U0_m_axi_aximm_V_BREADY,
        m_axi_aximm_V_BRESP => gmem1_BRESP,
        m_axi_aximm_V_BID => gmem1_BID,
        m_axi_aximm_V_BUSER => gmem1_BUSER,
        aximm_V_offset_dout => dst_V_c_dout,
        aximm_V_offset_empty_n => dst_V_c_empty_n,
        aximm_V_offset_read => PixelStream2AXIBursts_U0_aximm_V_offset_read,
        ap_ext_blocking_n => PixelStream2AXIBursts_U0_ap_ext_blocking_n,
        ap_str_blocking_n => PixelStream2AXIBursts_U0_ap_str_blocking_n,
        ap_int_blocking_n => PixelStream2AXIBursts_U0_ap_int_blocking_n);

    src_pixels_V_U : component fifo_w8_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIBursts2PixelStream8_U0_stream_V_din,
        if_full_n => src_pixels_V_full_n,
        if_write => AXIBursts2PixelStream8_U0_stream_V_write,
        if_dout => src_pixels_V_dout,
        if_empty_n => src_pixels_V_empty_n,
        if_read => Filter2D_U0_srcImg_V_read);

    width_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIBursts2PixelStream8_U0_width_out_din,
        if_full_n => width_c_full_n,
        if_write => AXIBursts2PixelStream8_U0_width_out_write,
        if_dout => width_c_dout,
        if_empty_n => width_c_empty_n,
        if_read => Filter2D_U0_width_read);

    height_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIBursts2PixelStream8_U0_height_out_din,
        if_full_n => height_c_full_n,
        if_write => AXIBursts2PixelStream8_U0_height_out_write,
        if_dout => height_c_dout,
        if_empty_n => height_c_empty_n,
        if_read => Filter2D_U0_height_read);

    stride_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIBursts2PixelStream8_U0_stride_out_din,
        if_full_n => stride_c_full_n,
        if_write => AXIBursts2PixelStream8_U0_stride_out_write,
        if_dout => stride_c_dout,
        if_empty_n => stride_c_empty_n,
        if_read => PixelStream2AXIBursts_U0_stride_read);

    coeffs_c_U : component fifo_w64_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIBursts2PixelStream8_U0_coeffs_out_din,
        if_full_n => coeffs_c_full_n,
        if_write => AXIBursts2PixelStream8_U0_coeffs_out_write,
        if_dout => coeffs_c_dout,
        if_empty_n => coeffs_c_empty_n,
        if_read => Filter2D_U0_srcCoeffs_offset_read);

    dst_V_c_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIBursts2PixelStream8_U0_dst_V_out_din,
        if_full_n => dst_V_c_full_n,
        if_write => AXIBursts2PixelStream8_U0_dst_V_out_write,
        if_dout => dst_V_c_dout,
        if_empty_n => dst_V_c_empty_n,
        if_read => PixelStream2AXIBursts_U0_aximm_V_offset_read);

    dst_pixels_V_U : component fifo_w8_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D_U0_dstImg_V_din,
        if_full_n => dst_pixels_V_full_n,
        if_write => Filter2D_U0_dstImg_V_write,
        if_dout => dst_pixels_V_dout,
        if_empty_n => dst_pixels_V_empty_n,
        if_read => PixelStream2AXIBursts_U0_stream_V_read);

    width_c1_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D_U0_width_out_din,
        if_full_n => width_c1_full_n,
        if_write => Filter2D_U0_width_out_write,
        if_dout => width_c1_dout,
        if_empty_n => width_c1_empty_n,
        if_read => PixelStream2AXIBursts_U0_width_read);

    height_c2_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D_U0_height_out_din,
        if_full_n => height_c2_full_n,
        if_write => Filter2D_U0_height_out_write,
        if_dout => height_c2_dout,
        if_empty_n => height_c2_empty_n,
        if_read => PixelStream2AXIBursts_U0_height_read);





    PixelStream2AXIBursts_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                PixelStream2AXIBursts_U0_ap_start <= ap_const_logic_0;
            else
                PixelStream2AXIBursts_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    ap_sync_reg_AXIBursts2PixelStream8_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIBursts2PixelStream8_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_sync_ready))) then 
                    ap_sync_reg_AXIBursts2PixelStream8_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIBursts2PixelStream8_U0_ap_ready <= ap_sync_AXIBursts2PixelStream8_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Filter2D_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Filter2D_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_sync_ready))) then 
                    ap_sync_reg_Filter2D_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Filter2D_U0_ap_ready <= ap_sync_Filter2D_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIBursts2PixelStream8_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sync_ready) and (AXIBursts2PixelStream8_U0_ap_ready = ap_const_logic_0))) then 
                AXIBursts2PixelStream8_U0_ap_ready_count <= std_logic_vector(unsigned(AXIBursts2PixelStream8_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_0 = ap_sync_ready) and (ap_const_logic_1 = AXIBursts2PixelStream8_U0_ap_ready))) then 
                AXIBursts2PixelStream8_U0_ap_ready_count <= std_logic_vector(unsigned(AXIBursts2PixelStream8_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Filter2D_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Filter2D_U0_ap_ready) and (ap_const_logic_1 = ap_sync_ready))) then 
                Filter2D_U0_ap_ready_count <= std_logic_vector(unsigned(Filter2D_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Filter2D_U0_ap_ready) and (ap_const_logic_0 = ap_sync_ready))) then 
                Filter2D_U0_ap_ready_count <= std_logic_vector(unsigned(Filter2D_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_int_blocking_n_reg <= ap_int_blocking_n;
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_n_inv <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_str_blocking_n_reg <= ap_str_blocking_n;
        end if;
    end process;
    AXIBursts2PixelStream8_U0_ap_continue <= ap_const_logic_1;
    AXIBursts2PixelStream8_U0_ap_start <= (ap_start and (ap_sync_reg_AXIBursts2PixelStream8_U0_ap_ready xor ap_const_logic_1));
    AXIBursts2PixelStream8_U0_start_full_n <= ap_const_logic_0;
    AXIBursts2PixelStream8_U0_start_write <= ap_const_logic_0;
    Filter2D_U0_ap_continue <= ap_const_logic_1;
    Filter2D_U0_ap_start <= (ap_start and (ap_sync_reg_Filter2D_U0_ap_ready xor ap_const_logic_1));
    Filter2D_U0_start_full_n <= ap_const_logic_0;
    Filter2D_U0_start_write <= ap_const_logic_0;
    PixelStream2AXIBursts_U0_ap_continue <= ap_const_logic_1;
    PixelStream2AXIBursts_U0_start_full_n <= ap_const_logic_0;
    PixelStream2AXIBursts_U0_start_write <= ap_const_logic_0;
    ap_done <= PixelStream2AXIBursts_U0_ap_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_ext_blocking_sub_n);
    ap_ext_blocking_sub_n <= (AXIBursts2PixelStream8_U0_ap_ext_blocking_n and Filter2D_U0_ap_ext_blocking_n and PixelStream2AXIBursts_U0_ap_ext_blocking_n);
    ap_idle <= (AXIBursts2PixelStream8_U0_ap_idle and Filter2D_U0_ap_idle and PixelStream2AXIBursts_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_int_blocking_sub_n);
    ap_int_blocking_sub_n <= (AXIBursts2PixelStream8_U0_ap_int_blocking_n and Filter2D_U0_ap_int_blocking_n and PixelStream2AXIBursts_U0_ap_int_blocking_n);
    ap_ready <= ap_sync_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_cur_n and ap_str_blocking_sub_n);
    ap_str_blocking_sub_n <= (AXIBursts2PixelStream8_U0_ap_str_blocking_n and Filter2D_U0_ap_str_blocking_n and PixelStream2AXIBursts_U0_ap_str_blocking_n);
    ap_sync_AXIBursts2PixelStream8_U0_ap_ready <= (AXIBursts2PixelStream8_U0_ap_ready or ap_sync_reg_AXIBursts2PixelStream8_U0_ap_ready);
    ap_sync_Filter2D_U0_ap_ready <= (Filter2D_U0_ap_ready or ap_sync_reg_Filter2D_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= PixelStream2AXIBursts_U0_ap_done;
    ap_sync_ready <= (ap_sync_Filter2D_U0_ap_ready and ap_sync_AXIBursts2PixelStream8_U0_ap_ready);

    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_const_logic_0 = ap_ext_blocking_n_reg) and (ap_const_logic_1 = ap_ext_blocking_n))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_const_logic_0 = ap_int_blocking_n_reg) and (ap_const_logic_1 = ap_int_blocking_n))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_const_logic_0 = ap_str_blocking_n_reg) and (ap_const_logic_1 = ap_str_blocking_n))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_const_logic_1 = ap_ext_blocking_n_reg) and (ap_const_logic_0 = ap_ext_blocking_n))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_const_logic_1 = ap_int_blocking_n_reg) and (ap_const_logic_0 = ap_int_blocking_n))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_const_logic_1 = ap_str_blocking_n_reg) and (ap_const_logic_0 = ap_str_blocking_n))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

end behav;
