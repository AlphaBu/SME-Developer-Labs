// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Filter2DKernel_HH_
#define _Filter2DKernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "AXIBursts2PixelStream8.h"
#include "Filter2D.h"
#include "PixelStream2AXIBursts.h"
#include "fifo_w8_d64_A.h"
#include "fifo_w32_d1_A.h"
#include "fifo_w32_d2_A.h"
#include "fifo_w64_d1_A.h"
#include "fifo_w64_d2_A.h"
#include "Filter2DKernel_control_s_axi.h"
#include "Filter2DKernel_gmem1_m_axi.h"
#include "Filter2DKernel_gmem0_m_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM1_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_GMEM1_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_DATA_WIDTH = 256,
         unsigned int C_M_AXI_GMEM1_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_GMEM0_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_DATA_WIDTH = 256,
         unsigned int C_M_AXI_GMEM0_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_BUSER_WIDTH = 1>
struct Filter2DKernel : public sc_module {
    // Port declarations 116
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_out< sc_logic > m_axi_gmem1_AWVALID;
    sc_in< sc_logic > m_axi_gmem1_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM1_ADDR_WIDTH> > m_axi_gmem1_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_AWID;
    sc_out< sc_lv<8> > m_axi_gmem1_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem1_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem1_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem1_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem1_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem1_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem1_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem1_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM1_AWUSER_WIDTH> > m_axi_gmem1_AWUSER;
    sc_out< sc_logic > m_axi_gmem1_WVALID;
    sc_in< sc_logic > m_axi_gmem1_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM1_DATA_WIDTH> > m_axi_gmem1_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM1_DATA_WIDTH/8> > m_axi_gmem1_WSTRB;
    sc_out< sc_logic > m_axi_gmem1_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_WID;
    sc_out< sc_uint<C_M_AXI_GMEM1_WUSER_WIDTH> > m_axi_gmem1_WUSER;
    sc_out< sc_logic > m_axi_gmem1_ARVALID;
    sc_in< sc_logic > m_axi_gmem1_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM1_ADDR_WIDTH> > m_axi_gmem1_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_ARID;
    sc_out< sc_lv<8> > m_axi_gmem1_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem1_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem1_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem1_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem1_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem1_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem1_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem1_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM1_ARUSER_WIDTH> > m_axi_gmem1_ARUSER;
    sc_in< sc_logic > m_axi_gmem1_RVALID;
    sc_out< sc_logic > m_axi_gmem1_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM1_DATA_WIDTH> > m_axi_gmem1_RDATA;
    sc_in< sc_logic > m_axi_gmem1_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_RID;
    sc_in< sc_uint<C_M_AXI_GMEM1_RUSER_WIDTH> > m_axi_gmem1_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem1_RRESP;
    sc_in< sc_logic > m_axi_gmem1_BVALID;
    sc_out< sc_logic > m_axi_gmem1_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem1_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_BID;
    sc_in< sc_uint<C_M_AXI_GMEM1_BUSER_WIDTH> > m_axi_gmem1_BUSER;
    sc_out< sc_logic > m_axi_gmem0_AWVALID;
    sc_in< sc_logic > m_axi_gmem0_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM0_ADDR_WIDTH> > m_axi_gmem0_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_AWID;
    sc_out< sc_lv<8> > m_axi_gmem0_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem0_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem0_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem0_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem0_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem0_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem0_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem0_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM0_AWUSER_WIDTH> > m_axi_gmem0_AWUSER;
    sc_out< sc_logic > m_axi_gmem0_WVALID;
    sc_in< sc_logic > m_axi_gmem0_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM0_DATA_WIDTH> > m_axi_gmem0_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM0_DATA_WIDTH/8> > m_axi_gmem0_WSTRB;
    sc_out< sc_logic > m_axi_gmem0_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_WID;
    sc_out< sc_uint<C_M_AXI_GMEM0_WUSER_WIDTH> > m_axi_gmem0_WUSER;
    sc_out< sc_logic > m_axi_gmem0_ARVALID;
    sc_in< sc_logic > m_axi_gmem0_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM0_ADDR_WIDTH> > m_axi_gmem0_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_ARID;
    sc_out< sc_lv<8> > m_axi_gmem0_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem0_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem0_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem0_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem0_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem0_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem0_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem0_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM0_ARUSER_WIDTH> > m_axi_gmem0_ARUSER;
    sc_in< sc_logic > m_axi_gmem0_RVALID;
    sc_out< sc_logic > m_axi_gmem0_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM0_DATA_WIDTH> > m_axi_gmem0_RDATA;
    sc_in< sc_logic > m_axi_gmem0_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_RID;
    sc_in< sc_uint<C_M_AXI_GMEM0_RUSER_WIDTH> > m_axi_gmem0_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem0_RRESP;
    sc_in< sc_logic > m_axi_gmem0_BVALID;
    sc_out< sc_logic > m_axi_gmem0_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem0_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_BID;
    sc_in< sc_uint<C_M_AXI_GMEM0_BUSER_WIDTH> > m_axi_gmem0_BUSER;
    sc_out< sc_logic > stall_start_ext;
    sc_out< sc_logic > stall_done_ext;
    sc_out< sc_logic > stall_start_str;
    sc_out< sc_logic > stall_done_str;
    sc_out< sc_logic > stall_start_int;
    sc_out< sc_logic > stall_done_int;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<2> > ap_var_for_const6;
    sc_signal< sc_lv<64> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<32> > ap_var_for_const4;
    sc_signal< sc_lv<3> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const7;
    sc_signal< sc_lv<256> > ap_var_for_const8;


    // Module declarations
    Filter2DKernel(sc_module_name name);
    SC_HAS_PROCESS(Filter2DKernel);

    ~Filter2DKernel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Filter2DKernel_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* Filter2DKernel_control_s_axi_U;
    Filter2DKernel_gmem1_m_axi<256,64,5,16,16,16,16,C_M_AXI_GMEM1_ID_WIDTH,C_M_AXI_GMEM1_ADDR_WIDTH,C_M_AXI_GMEM1_DATA_WIDTH,C_M_AXI_GMEM1_AWUSER_WIDTH,C_M_AXI_GMEM1_ARUSER_WIDTH,C_M_AXI_GMEM1_WUSER_WIDTH,C_M_AXI_GMEM1_RUSER_WIDTH,C_M_AXI_GMEM1_BUSER_WIDTH,C_M_AXI_GMEM1_USER_VALUE,C_M_AXI_GMEM1_PROT_VALUE,C_M_AXI_GMEM1_CACHE_VALUE>* Filter2DKernel_gmem1_m_axi_U;
    Filter2DKernel_gmem0_m_axi<256,64,5,16,16,16,16,C_M_AXI_GMEM0_ID_WIDTH,C_M_AXI_GMEM0_ADDR_WIDTH,C_M_AXI_GMEM0_DATA_WIDTH,C_M_AXI_GMEM0_AWUSER_WIDTH,C_M_AXI_GMEM0_ARUSER_WIDTH,C_M_AXI_GMEM0_WUSER_WIDTH,C_M_AXI_GMEM0_RUSER_WIDTH,C_M_AXI_GMEM0_BUSER_WIDTH,C_M_AXI_GMEM0_USER_VALUE,C_M_AXI_GMEM0_PROT_VALUE,C_M_AXI_GMEM0_CACHE_VALUE>* Filter2DKernel_gmem0_m_axi_U;
    AXIBursts2PixelStream8* AXIBursts2PixelStream8_U0;
    Filter2D* Filter2D_U0;
    PixelStream2AXIBursts* PixelStream2AXIBursts_U0;
    fifo_w8_d64_A* src_pixels_V_U;
    fifo_w32_d1_A* width_c_U;
    fifo_w32_d1_A* height_c_U;
    fifo_w32_d2_A* stride_c_U;
    fifo_w64_d1_A* coeffs_c_U;
    fifo_w64_d2_A* dst_V_c_U;
    fifo_w8_d64_A* dst_pixels_V_U;
    fifo_w32_d1_A* width_c1_U;
    fifo_w32_d1_A* height_c2_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<64> > coeffs;
    sc_signal< sc_lv<64> > src_V;
    sc_signal< sc_lv<32> > width;
    sc_signal< sc_lv<32> > height;
    sc_signal< sc_lv<32> > stride;
    sc_signal< sc_lv<64> > dst_V;
    sc_signal< sc_logic > gmem1_AWREADY;
    sc_signal< sc_logic > gmem1_WREADY;
    sc_signal< sc_logic > gmem1_ARREADY;
    sc_signal< sc_logic > gmem1_RVALID;
    sc_signal< sc_lv<256> > gmem1_RDATA;
    sc_signal< sc_logic > gmem1_RLAST;
    sc_signal< sc_lv<1> > gmem1_RID;
    sc_signal< sc_lv<1> > gmem1_RUSER;
    sc_signal< sc_lv<2> > gmem1_RRESP;
    sc_signal< sc_logic > gmem1_BVALID;
    sc_signal< sc_lv<2> > gmem1_BRESP;
    sc_signal< sc_lv<1> > gmem1_BID;
    sc_signal< sc_lv<1> > gmem1_BUSER;
    sc_signal< sc_logic > gmem0_AWREADY;
    sc_signal< sc_logic > gmem0_WREADY;
    sc_signal< sc_logic > gmem0_ARREADY;
    sc_signal< sc_logic > gmem0_RVALID;
    sc_signal< sc_lv<256> > gmem0_RDATA;
    sc_signal< sc_logic > gmem0_RLAST;
    sc_signal< sc_lv<1> > gmem0_RID;
    sc_signal< sc_lv<1> > gmem0_RUSER;
    sc_signal< sc_lv<2> > gmem0_RRESP;
    sc_signal< sc_logic > gmem0_BVALID;
    sc_signal< sc_lv<2> > gmem0_BRESP;
    sc_signal< sc_lv<1> > gmem0_BID;
    sc_signal< sc_lv<1> > gmem0_BUSER;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_ap_start;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_ap_done;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_ap_continue;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_ap_idle;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_ap_ready;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWVALID;
    sc_signal< sc_lv<64> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWADDR;
    sc_signal< sc_lv<1> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWID;
    sc_signal< sc_lv<32> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWLEN;
    sc_signal< sc_lv<3> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWSIZE;
    sc_signal< sc_lv<2> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWBURST;
    sc_signal< sc_lv<2> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWLOCK;
    sc_signal< sc_lv<4> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWCACHE;
    sc_signal< sc_lv<3> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWPROT;
    sc_signal< sc_lv<4> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWQOS;
    sc_signal< sc_lv<4> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWREGION;
    sc_signal< sc_lv<1> > AXIBursts2PixelStream8_U0_m_axi_axi_V_AWUSER;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_m_axi_axi_V_WVALID;
    sc_signal< sc_lv<256> > AXIBursts2PixelStream8_U0_m_axi_axi_V_WDATA;
    sc_signal< sc_lv<32> > AXIBursts2PixelStream8_U0_m_axi_axi_V_WSTRB;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_m_axi_axi_V_WLAST;
    sc_signal< sc_lv<1> > AXIBursts2PixelStream8_U0_m_axi_axi_V_WID;
    sc_signal< sc_lv<1> > AXIBursts2PixelStream8_U0_m_axi_axi_V_WUSER;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARVALID;
    sc_signal< sc_lv<64> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARADDR;
    sc_signal< sc_lv<1> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARID;
    sc_signal< sc_lv<32> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARLEN;
    sc_signal< sc_lv<3> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARSIZE;
    sc_signal< sc_lv<2> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARBURST;
    sc_signal< sc_lv<2> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARLOCK;
    sc_signal< sc_lv<4> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARCACHE;
    sc_signal< sc_lv<3> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARPROT;
    sc_signal< sc_lv<4> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARQOS;
    sc_signal< sc_lv<4> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARREGION;
    sc_signal< sc_lv<1> > AXIBursts2PixelStream8_U0_m_axi_axi_V_ARUSER;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_m_axi_axi_V_RREADY;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_m_axi_axi_V_BREADY;
    sc_signal< sc_lv<8> > AXIBursts2PixelStream8_U0_stream_V_din;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_stream_V_write;
    sc_signal< sc_lv<32> > AXIBursts2PixelStream8_U0_width_out_din;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_width_out_write;
    sc_signal< sc_lv<32> > AXIBursts2PixelStream8_U0_height_out_din;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_height_out_write;
    sc_signal< sc_lv<32> > AXIBursts2PixelStream8_U0_stride_out_din;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_stride_out_write;
    sc_signal< sc_lv<64> > AXIBursts2PixelStream8_U0_coeffs_out_din;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_coeffs_out_write;
    sc_signal< sc_lv<64> > AXIBursts2PixelStream8_U0_dst_V_out_din;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_dst_V_out_write;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_ap_ext_blocking_n;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_ap_str_blocking_n;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_ap_int_blocking_n;
    sc_signal< sc_logic > Filter2D_U0_ap_start;
    sc_signal< sc_logic > Filter2D_U0_ap_done;
    sc_signal< sc_logic > Filter2D_U0_ap_continue;
    sc_signal< sc_logic > Filter2D_U0_ap_idle;
    sc_signal< sc_logic > Filter2D_U0_ap_ready;
    sc_signal< sc_logic > Filter2D_U0_m_axi_srcCoeffs_AWVALID;
    sc_signal< sc_lv<64> > Filter2D_U0_m_axi_srcCoeffs_AWADDR;
    sc_signal< sc_lv<1> > Filter2D_U0_m_axi_srcCoeffs_AWID;
    sc_signal< sc_lv<32> > Filter2D_U0_m_axi_srcCoeffs_AWLEN;
    sc_signal< sc_lv<3> > Filter2D_U0_m_axi_srcCoeffs_AWSIZE;
    sc_signal< sc_lv<2> > Filter2D_U0_m_axi_srcCoeffs_AWBURST;
    sc_signal< sc_lv<2> > Filter2D_U0_m_axi_srcCoeffs_AWLOCK;
    sc_signal< sc_lv<4> > Filter2D_U0_m_axi_srcCoeffs_AWCACHE;
    sc_signal< sc_lv<3> > Filter2D_U0_m_axi_srcCoeffs_AWPROT;
    sc_signal< sc_lv<4> > Filter2D_U0_m_axi_srcCoeffs_AWQOS;
    sc_signal< sc_lv<4> > Filter2D_U0_m_axi_srcCoeffs_AWREGION;
    sc_signal< sc_lv<1> > Filter2D_U0_m_axi_srcCoeffs_AWUSER;
    sc_signal< sc_logic > Filter2D_U0_m_axi_srcCoeffs_WVALID;
    sc_signal< sc_lv<256> > Filter2D_U0_m_axi_srcCoeffs_WDATA;
    sc_signal< sc_lv<32> > Filter2D_U0_m_axi_srcCoeffs_WSTRB;
    sc_signal< sc_logic > Filter2D_U0_m_axi_srcCoeffs_WLAST;
    sc_signal< sc_lv<1> > Filter2D_U0_m_axi_srcCoeffs_WID;
    sc_signal< sc_lv<1> > Filter2D_U0_m_axi_srcCoeffs_WUSER;
    sc_signal< sc_logic > Filter2D_U0_m_axi_srcCoeffs_ARVALID;
    sc_signal< sc_lv<64> > Filter2D_U0_m_axi_srcCoeffs_ARADDR;
    sc_signal< sc_lv<1> > Filter2D_U0_m_axi_srcCoeffs_ARID;
    sc_signal< sc_lv<32> > Filter2D_U0_m_axi_srcCoeffs_ARLEN;
    sc_signal< sc_lv<3> > Filter2D_U0_m_axi_srcCoeffs_ARSIZE;
    sc_signal< sc_lv<2> > Filter2D_U0_m_axi_srcCoeffs_ARBURST;
    sc_signal< sc_lv<2> > Filter2D_U0_m_axi_srcCoeffs_ARLOCK;
    sc_signal< sc_lv<4> > Filter2D_U0_m_axi_srcCoeffs_ARCACHE;
    sc_signal< sc_lv<3> > Filter2D_U0_m_axi_srcCoeffs_ARPROT;
    sc_signal< sc_lv<4> > Filter2D_U0_m_axi_srcCoeffs_ARQOS;
    sc_signal< sc_lv<4> > Filter2D_U0_m_axi_srcCoeffs_ARREGION;
    sc_signal< sc_lv<1> > Filter2D_U0_m_axi_srcCoeffs_ARUSER;
    sc_signal< sc_logic > Filter2D_U0_m_axi_srcCoeffs_RREADY;
    sc_signal< sc_logic > Filter2D_U0_m_axi_srcCoeffs_BREADY;
    sc_signal< sc_logic > Filter2D_U0_srcCoeffs_offset_read;
    sc_signal< sc_logic > Filter2D_U0_srcImg_V_read;
    sc_signal< sc_logic > Filter2D_U0_width_read;
    sc_signal< sc_logic > Filter2D_U0_height_read;
    sc_signal< sc_lv<8> > Filter2D_U0_dstImg_V_din;
    sc_signal< sc_logic > Filter2D_U0_dstImg_V_write;
    sc_signal< sc_lv<32> > Filter2D_U0_width_out_din;
    sc_signal< sc_logic > Filter2D_U0_width_out_write;
    sc_signal< sc_lv<32> > Filter2D_U0_height_out_din;
    sc_signal< sc_logic > Filter2D_U0_height_out_write;
    sc_signal< sc_logic > Filter2D_U0_ap_ext_blocking_n;
    sc_signal< sc_logic > Filter2D_U0_ap_str_blocking_n;
    sc_signal< sc_logic > Filter2D_U0_ap_int_blocking_n;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_ap_start;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_ap_done;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_ap_continue;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_ap_idle;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_ap_ready;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_stream_V_read;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_width_read;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_height_read;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_stride_read;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWVALID;
    sc_signal< sc_lv<64> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWADDR;
    sc_signal< sc_lv<1> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWID;
    sc_signal< sc_lv<32> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWLEN;
    sc_signal< sc_lv<3> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWSIZE;
    sc_signal< sc_lv<2> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWBURST;
    sc_signal< sc_lv<2> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWLOCK;
    sc_signal< sc_lv<4> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWCACHE;
    sc_signal< sc_lv<3> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWPROT;
    sc_signal< sc_lv<4> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWQOS;
    sc_signal< sc_lv<4> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWREGION;
    sc_signal< sc_lv<1> > PixelStream2AXIBursts_U0_m_axi_aximm_V_AWUSER;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_m_axi_aximm_V_WVALID;
    sc_signal< sc_lv<256> > PixelStream2AXIBursts_U0_m_axi_aximm_V_WDATA;
    sc_signal< sc_lv<32> > PixelStream2AXIBursts_U0_m_axi_aximm_V_WSTRB;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_m_axi_aximm_V_WLAST;
    sc_signal< sc_lv<1> > PixelStream2AXIBursts_U0_m_axi_aximm_V_WID;
    sc_signal< sc_lv<1> > PixelStream2AXIBursts_U0_m_axi_aximm_V_WUSER;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARVALID;
    sc_signal< sc_lv<64> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARADDR;
    sc_signal< sc_lv<1> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARID;
    sc_signal< sc_lv<32> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARLEN;
    sc_signal< sc_lv<3> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARSIZE;
    sc_signal< sc_lv<2> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARBURST;
    sc_signal< sc_lv<2> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARLOCK;
    sc_signal< sc_lv<4> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARCACHE;
    sc_signal< sc_lv<3> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARPROT;
    sc_signal< sc_lv<4> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARQOS;
    sc_signal< sc_lv<4> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARREGION;
    sc_signal< sc_lv<1> > PixelStream2AXIBursts_U0_m_axi_aximm_V_ARUSER;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_m_axi_aximm_V_RREADY;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_m_axi_aximm_V_BREADY;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_aximm_V_offset_read;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_ap_ext_blocking_n;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_ap_str_blocking_n;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_ap_int_blocking_n;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > src_pixels_V_full_n;
    sc_signal< sc_lv<8> > src_pixels_V_dout;
    sc_signal< sc_logic > src_pixels_V_empty_n;
    sc_signal< sc_logic > width_c_full_n;
    sc_signal< sc_lv<32> > width_c_dout;
    sc_signal< sc_logic > width_c_empty_n;
    sc_signal< sc_logic > height_c_full_n;
    sc_signal< sc_lv<32> > height_c_dout;
    sc_signal< sc_logic > height_c_empty_n;
    sc_signal< sc_logic > stride_c_full_n;
    sc_signal< sc_lv<32> > stride_c_dout;
    sc_signal< sc_logic > stride_c_empty_n;
    sc_signal< sc_logic > coeffs_c_full_n;
    sc_signal< sc_lv<64> > coeffs_c_dout;
    sc_signal< sc_logic > coeffs_c_empty_n;
    sc_signal< sc_logic > dst_V_c_full_n;
    sc_signal< sc_lv<64> > dst_V_c_dout;
    sc_signal< sc_logic > dst_V_c_empty_n;
    sc_signal< sc_logic > dst_pixels_V_full_n;
    sc_signal< sc_lv<8> > dst_pixels_V_dout;
    sc_signal< sc_logic > dst_pixels_V_empty_n;
    sc_signal< sc_logic > width_c1_full_n;
    sc_signal< sc_lv<32> > width_c1_dout;
    sc_signal< sc_logic > width_c1_empty_n;
    sc_signal< sc_logic > height_c2_full_n;
    sc_signal< sc_lv<32> > height_c2_dout;
    sc_signal< sc_logic > height_c2_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_Filter2D_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Filter2D_U0_ap_ready;
    sc_signal< sc_lv<2> > Filter2D_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_AXIBursts2PixelStream8_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_AXIBursts2PixelStream8_U0_ap_ready;
    sc_signal< sc_lv<2> > AXIBursts2PixelStream8_U0_ap_ready_count;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_start_full_n;
    sc_signal< sc_logic > AXIBursts2PixelStream8_U0_start_write;
    sc_signal< sc_logic > Filter2D_U0_start_full_n;
    sc_signal< sc_logic > Filter2D_U0_start_write;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_start_full_n;
    sc_signal< sc_logic > PixelStream2AXIBursts_U0_start_write;
    sc_signal< sc_logic > ap_ext_blocking_cur_n;
    sc_signal< sc_logic > ap_str_blocking_cur_n;
    sc_signal< sc_logic > ap_int_blocking_cur_n;
    sc_signal< sc_logic > ap_ext_blocking_sub_n;
    sc_signal< sc_logic > ap_str_blocking_sub_n;
    sc_signal< sc_logic > ap_int_blocking_sub_n;
    sc_signal< sc_logic > ap_ext_blocking_n;
    sc_signal< sc_logic > ap_str_blocking_n;
    sc_signal< sc_logic > ap_int_blocking_n;
    sc_signal< sc_logic > ap_ext_blocking_n_reg;
    sc_signal< sc_logic > ap_str_blocking_n_reg;
    sc_signal< sc_logic > ap_int_blocking_n_reg;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const int C_M_AXI_GMEM1_USER_VALUE;
    static const int C_M_AXI_GMEM1_PROT_VALUE;
    static const int C_M_AXI_GMEM1_CACHE_VALUE;
    static const int C_M_AXI_ID_WIDTH;
    static const int C_M_AXI_ADDR_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_WSTRB_WIDTH;
    static const int C_M_AXI_AWUSER_WIDTH;
    static const int C_M_AXI_ARUSER_WIDTH;
    static const int C_M_AXI_WUSER_WIDTH;
    static const int C_M_AXI_RUSER_WIDTH;
    static const int C_M_AXI_BUSER_WIDTH;
    static const int C_M_AXI_GMEM0_USER_VALUE;
    static const int C_M_AXI_GMEM0_PROT_VALUE;
    static const int C_M_AXI_GMEM0_CACHE_VALUE;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<256> ap_const_lv256_lc_1;
    static const sc_lv<256> ap_const_lv256_lc_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_AXIBursts2PixelStream8_U0_ap_continue();
    void thread_AXIBursts2PixelStream8_U0_ap_start();
    void thread_AXIBursts2PixelStream8_U0_start_full_n();
    void thread_AXIBursts2PixelStream8_U0_start_write();
    void thread_Filter2D_U0_ap_continue();
    void thread_Filter2D_U0_ap_start();
    void thread_Filter2D_U0_start_full_n();
    void thread_Filter2D_U0_start_write();
    void thread_PixelStream2AXIBursts_U0_ap_continue();
    void thread_PixelStream2AXIBursts_U0_start_full_n();
    void thread_PixelStream2AXIBursts_U0_start_write();
    void thread_ap_done();
    void thread_ap_ext_blocking_cur_n();
    void thread_ap_ext_blocking_n();
    void thread_ap_ext_blocking_sub_n();
    void thread_ap_idle();
    void thread_ap_int_blocking_cur_n();
    void thread_ap_int_blocking_n();
    void thread_ap_int_blocking_sub_n();
    void thread_ap_ready();
    void thread_ap_str_blocking_cur_n();
    void thread_ap_str_blocking_n();
    void thread_ap_str_blocking_sub_n();
    void thread_ap_sync_AXIBursts2PixelStream8_U0_ap_ready();
    void thread_ap_sync_Filter2D_U0_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_stall_done_ext();
    void thread_stall_done_int();
    void thread_stall_done_str();
    void thread_stall_start_ext();
    void thread_stall_start_int();
    void thread_stall_start_str();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
